POP START 
 
 




Subgoal Selected : ON(on-1: b , on-2: c)   for action GOALS()  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: null,sunderob: null)  
bounding operation for STACK(sob: null,sunderob: null)   And GOALS()   is start for sob: b sunderob: c 
 Link Added : 
              link provider : STACK(sob: b,sunderob: c)  
              link receiver  : GOALS()  
              link condition: ON(on-1: b , on-2: c)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sunderob: c)  

find thread for new action : STACK(sob: b,sunderob: c)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: c)  
no thread found
Thread Resolver Starts ....  
There is no thread to Resolve



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: c)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: null,sunderob: null)  
bounding operation for UNSTACK(sob: null,sunderob: null)   And STACK(sob: b,sunderob: c)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
              link receiver  : STACK(sob: b,sunderob: c)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: pop.Variable@6e6196fc)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Constrain added for action :UNSTACK (sob: b,sunderob: pop.Variable@6e6196fc)   Constrain is not equlity for (sunderob c)
but now i dont consider constrain
no thread found
Thread Resolver Starts ....  
There is no thread to Resolve



Subgoal Selected : ON(sob: b , sunderob: pop.Variable@6e6196fc)   for action UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: c)  
bounding operation for STACK(sob: b,sunderob: c)   And UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   is start for sob: b sunderob: pop.Variable@6e6196fc 
 Link Added : 
              link provider : STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
              link receiver  : UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
              link condition: ON(sob: b , sunderob: pop.Variable@6e6196fc)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sunderob: pop.Variable@6e6196fc)  

find thread for new action : STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   to STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
thread action is :STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: pop.Variable@6e6196fc)   comes before action UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  



Subgoal Selected : ON(on-1: a , on-2: b)   for action GOALS()  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: pop.Variable@6e6196fc)  
bounding operation for STACK(sob: b,sunderob: pop.Variable@6e6196fc)   And GOALS()   is start for sob: a sunderob: b 
 Link Added : 
              link provider : STACK(sob: a,sunderob: b)  
              link receiver  : GOALS()  
              link condition: ON(on-1: a , on-2: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: a)  
CLEAR(sunderob: b)  

find thread for new action : STACK(sob: a,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: a,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : HOLDING(sob: a)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  



Subgoal Selected : CLEAR(sunderob: b)   for action STACK(sob: a,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : INITIAL-STATE()  
 Link Added : 
              link provider : INITIAL-STATE()  
              link receiver  : STACK(sob: a,sunderob: b)  
              link condition: CLEAR(sunderob: b)  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between INITIAL-STATE to STACK for state CLEAR
 Thread find :
Thread Link :INITIAL-STATE()   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action STACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sunderob: b)   for action STACK(sob: a,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: null)  
bounding operation for PUT-DOWN(ob: null)   And STACK(sob: a,sunderob: b)   is start for ob: b 
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : STACK(sob: a,sunderob: b)  
              link condition: CLEAR(sunderob: b)  
1 new Subgoals added as bellow: 
HOLDING(ob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
Constrain added for action :PUT-DOWN (ob: b)   Constrain is not equlity for (ob a)
but now i dont consider constrain
no thread found
Thread Resolver Starts ....  
There is no thread to Resolve



Subgoal Selected : HOLDING(ob: b)   for action PUT-DOWN(ob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
bounding operation for UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   And PUT-DOWN(ob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
              link receiver  : PUT-DOWN(ob: b)  
              link condition: HOLDING(ob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: pop.Variable@6e6196fc)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
Constrain added for action :UNSTACK (sob: b,sunderob: pop.Variable@6e6196fc)   Constrain is not equlity for (sunderob b)
but now i dont consider constrain
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
thread action is :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
thread condition : ON(sob: b , sunderob: pop.Variable@6e6196fc)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: pop.Variable@6e6196fc)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: pop.Variable@6e6196fc)   Constrain is not equlity for (sunderob b)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: a,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   comes before action UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
 action UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(ob: b)   for action PUT-DOWN(ob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PICK-UP(ob1: null)  
bounding operation for PICK-UP(ob1: null)   And PUT-DOWN(ob: b)   is start for ob1: b 
 Link Added : 
              link provider : PICK-UP(ob1: b)  
              link receiver  : PUT-DOWN(ob: b)  
              link condition: HOLDING(ob: b)  
3 new Subgoals added as bellow: 
CLEAR(ob1: b)  
ON-TABLE(ob1: b)  
ARM-EMPTY()  

find thread for new action : PICK-UP(ob1: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PICK-UP(ob1: b)  
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: a,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(ob1: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: a,sunderob: b)   comes before action PICK-UP(ob1: b)  



Subgoal Selected : ARM-EMPTY()   for action PICK-UP(ob1: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: a,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: a,sunderob: b)  
              link receiver  : PICK-UP(ob1: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(ob: a)  
CLEAR(sunderob: b)  

find thread for new action : STACK(sob: a,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: a,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : HOLDING(sob: a)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :STACK (sob: a,sunderob: b)   Constrain is not equlity for (sob b)
but now i dont consider constrain
Thread Resolver Starts ....  
 action STACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sunderob: b)   for action STACK(sob: a,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)  
bounding operation for UNSTACK(sob: b,sunderob: pop.Variable@6e6196fc)   And STACK(sob: a,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: a,sunderob: b)  
              link condition: CLEAR(sunderob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: a,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : UNSTACK(sob: b,sunderob: b)  
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between UNSTACK to UNSTACK for state CLEAR
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: a,sunderob: b)  
bounding operation for STACK(sob: a,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(ob: a)  
CLEAR(sunderob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
Constrain added for action :STACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action PICK-UP(ob1: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : PICK-UP(ob1: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
Constrain added for action :PUT-DOWN (ob: b)   Constrain is not equlity for (ob a)
but now i dont consider constrain
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(ob: a)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: a 
 Link Added : 
              link provider : UNSTACK(sob: a,sunderob: b)  
              link receiver  : STACK(sob: a,sunderob: b)  
              link condition: HOLDING(ob: a)  
3 new Subgoals added as bellow: 
ON(sob: a , sunderob: b)  
CLEAR(sob: a)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: a,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: a,sunderob: b)  
Constrain added for action :UNSTACK (sob: a,sunderob: b)   Constrain is not equlity for (sob b)
but now i dont consider constrain
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: a,sunderob: b)  
thread action is :UNSTACK(sob: a,sunderob: b)  
thread condition : ON(sob: a , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: a,sunderob: b)  
thread condition : ON(sob: a , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: a,sunderob: b)   Constrain is not equlity for (sob b)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: a,sunderob: b)   Constrain is not equlity for (sob b)
but now i dont consider constrain
Thread Resolver Starts ....  
 action UNSTACK(sob: a,sunderob: b)   comes before action UNSTACK(sob: a,sunderob: b)  
 action UNSTACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action PICK-UP(ob1: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : PICK-UP(ob1: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
Constrain added for action :PUT-DOWN (ob: b)   Constrain is not equlity for (ob a)
but now i dont consider constrain
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action PICK-UP(ob1: b)  



Subgoal Selected : CLEAR(sob: a)   for action UNSTACK(sob: a,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: a,sunderob: b)  
bounding operation for STACK(sob: a,sunderob: b)   And UNSTACK(sob: a,sunderob: b)   is start for sob: a 
 Link Added : 
              link provider : STACK(sob: a,sunderob: b)  
              link receiver  : UNSTACK(sob: a,sunderob: b)  
              link condition: CLEAR(sob: a)  
2 new Subgoals added as bellow: 
HOLDING(ob: a)  
CLEAR(sob: a)  

find thread for new action : STACK(sob: a,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: a,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: a,sunderob: b)   to STACK(sob: a,sunderob: b)  
thread action is :STACK(sob: a,sunderob: b)  
thread condition : HOLDING(sob: a)  
Ignore all conditions on this link and action 
Constrain added for action :STACK (sob: a,sunderob: b)   Constrain is not equlity for (sunderob a)
but now i dont consider constrain
Constrain added for action :STACK (sob: a,sunderob: b)   Constrain is not equlity for (sob b)
but now i dont consider constrain
Constrain added for action :STACK (sob: a,sunderob: b)   Constrain is not equlity for (sunderob a)
but now i dont consider constrain
Thread Resolver Starts ....  
 action STACK(sob: a,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action PUT-DOWN(ob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: a,sunderob: b)  
bounding operation for UNSTACK(sob: a,sunderob: b)   And PUT-DOWN(ob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : PUT-DOWN(ob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action PUT-DOWN(ob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And PUT-DOWN(ob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : PUT-DOWN(ob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: a,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: a,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: a,sunderob: b)  
bounding operation for STACK(sob: a,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(ob: a)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
Constrain added for action :STACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : UNSTACK(sob: b,sunderob: b)  
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between UNSTACK to UNSTACK for state CLEAR
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : INITIAL-STATE()  
 Link Added : 
              link provider : INITIAL-STATE()  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between INITIAL-STATE to UNSTACK for state ARM-EMPTY
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  



Subgoal Selected : ON(sob: b , sunderob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : STACK(sob: b,sunderob: b)  
program find a cycle if we add the link so try another ways.
 Internal Action Selected : STACK(sob: b,sunderob: b)  
program find a cycle if we add the link so try another ways.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b sunderob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ON(sob: b , sunderob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : INITIAL-STATE()  
 Link Added : 
              link provider : INITIAL-STATE()  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between INITIAL-STATE to UNSTACK for state ARM-EMPTY
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ON(sob: b , sunderob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b sunderob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ON(sob: b , sunderob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ON(sob: b , sunderob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b sunderob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ON(sob: b , sunderob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ON(sob: b , sunderob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b sunderob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ON(sob: b , sunderob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
bounding operation for PUT-DOWN(ob: b)   And UNSTACK(sob: b,sunderob: b)   is start for ob: b 
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PICK-UP(ob1: b)  
 action PUT-DOWN(ob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ON(sob: b , sunderob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b sunderob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ON(sob: b , sunderob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : UNSTACK(sob: b,sunderob: b)  
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between UNSTACK to STACK for state CLEAR
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
bounding operation for PUT-DOWN(ob: b)   And STACK(sob: b,sunderob: b)   is start for ob: b 
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PICK-UP(ob1: b)  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PICK-UP(ob1: b)  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PUT-DOWN(ob: b)   comes before action PICK-UP(ob1: b)  
 action PUT-DOWN(ob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action PUT-DOWN(ob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
Nothing for Bounding
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PUT-DOWN(ob: b)  
bounding operation for PUT-DOWN(ob: b)   And UNSTACK(sob: b,sunderob: b)   is start for ob: b 
 Link Added : 
              link provider : PUT-DOWN(ob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
1 new Subgoals added as bellow: 
HOLDING(sob: b)  

find thread for new action : PUT-DOWN(ob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PUT-DOWN(ob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(ob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action PICK-UP(ob1: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sunderob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : CLEAR(sob: b)   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
bounding operation for STACK(sob: b,sunderob: b)   And UNSTACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: CLEAR(sob: b)  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : ARM-EMPTY()   for action UNSTACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: STACK(sob: b,sunderob: b)  
Nothing for Bounding
 Link Added : 
              link provider : STACK(sob: b,sunderob: b)  
              link receiver  : UNSTACK(sob: b,sunderob: b)  
              link condition: ARM-EMPTY()  
2 new Subgoals added as bellow: 
HOLDING(sob: b)  
CLEAR(sob: b)  

find thread for new action : STACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :STACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PICK-UP(ob1: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to PUT-DOWN(ob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : CLEAR(sunderob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action PICK-UP(ob1: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
 Internal Action Selected : PICK-UP(ob1: b)  
program find a cycle if we add the link so try another ways.
 Internal Action Selected : UNSTACK(sob: b,sunderob: b)  
program find a cycle if we add the link so try another ways.
 Internal Action Selected : UNSTACK(sob: b,sunderob: b)  
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: HOLDING(sob: b)  
Start Finding Thread for Internal Actions: 
Thread finding Starts ....
Internal Action used and must find actions that is thread for link between UNSTACK to STACK for state HOLDING
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :STACK(sob: b,sunderob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PUT-DOWN(ob: b)  
thread condition : HOLDING(sob: b)  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
 action STACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: UNSTACK(sob: b,sunderob: b)  
bounding operation for UNSTACK(sob: b,sunderob: b)   And STACK(sob: b,sunderob: b)   is start for sob: b 
 Link Added : 
              link provider : UNSTACK(sob: b,sunderob: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
ON(sob: b , sunderob: b)  
CLEAR(sob: b)  
ARM-EMPTY()  

find thread for new action : UNSTACK(sob: b,sunderob: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :UNSTACK(sob: b,sunderob: b)  
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to GOALS()  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
Constrain added for action :UNSTACK (sob: b,sunderob: b)   Constrain is not equlity for (sob a)
but now i dont consider constrain
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : CLEAR(sob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ON(sob: b , sunderob: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :STACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :UNSTACK(sob: b,sunderob: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
Thread Resolver Starts ....  
 action UNSTACK(sob: b,sunderob: b)   comes before action STACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action UNSTACK(sob: b,sunderob: b)  
 action UNSTACK(sob: b,sunderob: b)   comes before action PUT-DOWN(ob: b)  
All Operation Failed in this turn of loop becuase adding order cause a loop.
the plan back to previous state and try another way to find solution.



Subgoal Selected : HOLDING(sob: b)   for action STACK(sob: b,sunderob: b)  
Start Searching in internal actions.
Internal Action not found or selected.
Start Searching an operators Satisfies the subgoal.
operators selected and goes for bounding. the operator is: PICK-UP(ob1: b)  
bounding operation for PICK-UP(ob1: b)   And STACK(sob: b,sunderob: b)   is start for ob1: b 
 Link Added : 
              link provider : PICK-UP(ob1: b)  
              link receiver  : STACK(sob: b,sunderob: b)  
              link condition: HOLDING(sob: b)  
3 new Subgoals added as bellow: 
CLEAR(ob1: b)  
ON-TABLE(ob1: b)  
ARM-EMPTY()  

find thread for new action : PICK-UP(ob1: b)  
Thread finding Starts ....
external action used and this actions must check to not delete any conditions of all links in plan. our action is :PICK-UP(ob1: b)  
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(ob1: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to STACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(ob1: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :PUT-DOWN(ob: b)   to PICK-UP(ob1: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sunderob: b)   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : CLEAR(ob1: b)  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :INITIAL-STATE()   to UNSTACK(sob: b,sunderob: b)  
thread action is :PICK-UP(ob1: b)  
thread condition : ARM-EMPTY()  
Ignore all conditions on this link and action 
 Thread find :
Thread Link :UNSTACK(sob: b,sund